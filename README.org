#+AUTHOR: avkoval (ok)
#+TITLE: Planning Poker
#+SETUPFILE: https://raw.githubusercontent.com/fniessen/org-html-themes/master/org/theme-readtheorg.setup
#+OPTIONS: num:nil toc:t ^:nil

* What is this

I am playing with technology and trying new things. Because JIRA does not provide
such functionality out of the box, I would like to develop SPA to play it with my
team. I am aware about tons of /similar/ products existing in this area (all are paid!), 
never seen any of them, and actually the work I do here is mostly for _my personal skills 
development_.

* Project structure

#+begin_example
Directory tree
==============
[-] PlanningPoker
 |--[+] __pycache__
 |--[-] backend                    <--- backed code
 |   |--[+] __pycache__
 |   |----- __init__.py
 |   |----- config.py
 |   `----- main.py                <---------------- main.py
 |--[+] planningpoker
 |--[-] pp-front                   <-- UIx project, created with:
 |   |--[+] dev                        npx create-uix-app@latest pp-front --re-frame`
 |   |--[+] node_modules
 |   |--[+] public
 |   |--[-] src
 |   |   `--[-] app
 |   |       |----- core.cljs      <--- function of FrontEnd
 |   |       |----- core.css
 |   |       |----- db.cljs
 |   |       |----- fx.cljs
 |   |       |----- handlers.cljs
 |   |       |----- hooks.cljs
 |   |       `----- subs.cljs
 |   |----- LICENSE.md
 |   |----- README.md
 |   |----- deps.edn
 |   |----- package.json
 |   |----- shadow-cljs.edn
 |   `----- yarn.lock
 |--[+] static
 |--[-] templates
 |   `----- index.html
 |--[+] tests
 |----- README.org                 <----- mode Source of this README.html
 |----- __init__.py
 |----- bb.edn                     <----- for commands
 |----- poetry.lock
 `----- pyproject.toml

#+end_example

* Architecture & UI ideas [3/7]

 - [X] FastAPI on Backend
 - [X] UIX^2 on Frontend
 - [X] .env configuration
 - [ ] Local memory caching for retrieved Jira data
 - [ ] Websocket for group actions
 - [ ] Logging screen on frontend (from websocket log)
   - [ ] "Vote accepted from ..."
   - [ ] "User ... logged in"

* Install
* Setup

  Copy & edit contents of .env file: setup variables

#+begin_example
cp .env-example .env
#+end_example
  
  To do this you will need to create Google Project and obtain Oauth authorization keys.

** Available settings

| Variable name         | Documentation                                                                                               |
|-----------------------+-------------------------------------------------------------------------------------------------------------|
| GOOGLE_CLIENT_ID      | Google Oauth credentials                                                                                    |
| GOOGLE_CLIENT_SECRET  |                                                                                                             |
| SECRET_KEY            | Secret key, must be specified                                                                               |
| ALLOWED_EMAIL_DOMAINS | Restrict domains list (for example list here only organization domains). If empty - all domains are allowed |

* Run

#+begin_example
poetry run fastapi dev backend/main.py
#+end_example

(if you have babashka installed):
#+begin_example
bb run fastapi
#+end_example

* WORKING Work Log: Planning poker for Fieldhub
  SCHEDULED: <2024-08-17 Sat>
  :LOGBOOK:
  CLOCK: [2024-09-09 Mon 07:08]--[2024-09-09 Mon 07:45] =>  0:37
  CLOCK: [2024-08-17 Sat 09:52]--[2024-08-17 Sat 10:04] =>  0:12
  CLOCK: [2024-08-17 Sat 08:14]--[2024-08-17 Sat 09:00] =>  0:46
  - State "WORKING"    from "IDEA"       [2024-08-17 Sat 08:05]
  - State "IDEA"       from "TODO"       [2024-08-17 Sat 08:05]
  - State "TODO"       from              [2024-08-17 Sat 07:55]
  :END:

** Technical design & architecture
*** DONE View practically, Kit, Uix & bootstrap the project
    CLOSED: [2024-08-17 Sat 20:05]
    :LOGBOOK:
    - State "DONE"       from "WORKING"    [2024-08-17 Sat 20:05]
    CLOCK: [2024-08-17 Sat 13:25]--[2024-08-17 Sat 17:07] =>  3:42
    CLOCK: [2024-08-17 Sat 11:20]--[2024-08-17 Sat 11:38] =>  0:18
    - State "WORKING"    from "DONE"       [2024-08-17 Sat 11:20]
    - State "DONE"       from "TODO"       [2024-08-17 Sat 11:15]
    - State "TODO"       from              [2024-08-17 Sat 07:55]
    :END:

 - [X] Decided to use FastCGI instead of Kit in this round ([2024-08-17 Sat 11:20]). Reasons:
   - I already know how to use Jira integtration with Python
   - I want to gain some FastAPI experience
 - [X] How to add ReFrame? 11:29.44 (00:08) Found, explained in: https://github.com/pitch-io/uix-starter
   #+begin_example
   npx create-uix-app@latest my-app --re-frame # adds re-frame setup
   #+end_example
 - [X] View (again) [[https://www.youtube.com/watch?v=4vgrLHsD0-I&t=3s][intro video from Roman Liutikov]]
 - [X] Re-try modern React tutorial
 - [X] Start learning Udemy React course, take some first lessons

*** DONE use FastAPI! use Google auth & ready Jira integration I have!
    CLOSED: [2024-08-25 Sun 15:05]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2024-08-25 Sun 15:05]
    CLOCK: [2024-08-18 Sun 20:26]--[2024-08-18 Sun 20:46] =>  0:20
    CLOCK: [2024-08-18 Sun 08:37]--[2024-08-18 Sun 20:26] => 11:49
    - State "TODO"       from              [2024-08-17 Sat 08:10]
    :END:

 - https://google-auth.readthedocs.io/en/master/
 - https://github.com/hanchon-live/tutorial-fastapi-oauth
 - https://blog.hanchon.live/guides/google-login-with-fastapi/ (following)
 - https://docs.authlib.org/en/latest/client/starlette.html (works)

*** DONE Use websocket for fast communication!
    CLOSED: [2024-09-15 Sun 14:55]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2024-09-15 Sun 14:55]
    - State "TODO"       from              [2024-08-17 Sat 08:10]
    :END:

 - FastAPI provides support: 
** UI Plan on functional implementation [0/6]
   :LOGBOOK:
   - State "TODO"       from              [2024-08-17 Sat 08:10]
   :END:

 * SPA - one screen on UIx
 * [ ] List logged in users
 * [ ] Set color for facilitator?
   * how to agree who is facilitator? may be anyone can? probably yes, but then warn on top who started it
 * [ ] Countdown timer (configuration for length) starts
 * [ ] List of SPs (configuration)
 * [ ] Strike for users who voted
 * [ ] Reveal cards with some visual effect

** DONE Bootstrap: FastAPI + UIx^2 in one folder & dev/prod start/deploy/+sentry/+logging
   CLOSED: [2024-08-25 Sun 07:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2024-08-25 Sun 07:05]
   CLOCK: [2024-08-17 Sat 10:04]--[2024-08-17 Sat 10:24] =>  0:20
   - State "TODO"       from              [2024-08-17 Sat 08:20]
   :END:

- [X] Install fastapi via poetry
- [X] Bootstrap UIX^2 project
- [X] Add/commit to git
- [ ] Publish on github
** DONE Google auth & JWT token (or session cookie)
   CLOSED: [2024-08-25 Sun 07:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2024-08-25 Sun 07:05]
   - State "TODO"       from              [2024-08-17 Sat 08:25]
   :END:
** DONE add running via bb.edn
   CLOSED: [2024-08-27 Tue 06:15]
   :LOGBOOK:
   - State "DONE"       from "WORKING"    [2024-08-27 Tue 06:15]
   - State "WORKING"    from "TODO"       [2024-08-25 Sun 15:05]
   - State "TODO"       from              [2024-08-25 Sun 12:10]
   :END:
 - Finish watching [[https://www.youtube.com/watch?v=u5ECoR7KT1Y][Babashka tasks (by Michiel Borkent)]] from /The London Clojurians are happy to present 3 years ago/

** DONE Search for ticket (Estimate ticket screen) [12/12]             :verb:
   CLOSED: [2024-09-15 Sun 15:15]
   :LOGBOOK:
   - State "DONE"       from "WORKING"    [2024-09-15 Sun 15:15]
   CLOCK: [2024-09-15 Sun 15:08]--[2024-09-15 Sun 15:15] =>  0:07
   CLOCK: [2024-09-04 Wed 07:23]--[2024-09-04 Wed 09:23] =>  2:00
   CLOCK: [2024-09-03 Tue 08:52]--[2024-09-03 Tue 09:52] =>  1:00
   CLOCK: [2024-08-31 Sat 14:10]--[2024-08-31 Sat 16:10] =>  2:00
   CLOCK: [2024-08-30 Fri 07:25]--[2024-08-30 Fri 10:56] =>  3:31
   CLOCK: [2024-08-29 Thu 08:05]--[2024-08-29 Thu 10:05] =>  2:00
   CLOCK: [2024-08-28 Wed 21:22]--[2024-08-28 Wed 23:22] =>  2:00
   CLOCK: [2024-08-28 Wed 05:30]--[2024-08-28 Wed 07:00] =>  1:30
   CLOCK: [2024-08-27 Tue 21:30]--[2024-08-27 Tue 21:55] =>  0:25
   - State "WORKING"    from "TODO"       [2024-08-25 Sun 15:05]
   CLOCK: [2024-08-25 Sun 12:00]--[2024-08-25 Sun 13:29] =>  1:29
   - State "TODO"       from              [2024-08-25 Sun 07:05]
   :END:

 - [X] Make a stub function on FastAPI side for now.
 - [X] Select library to make HTTP calls.
   A) Trying https://github.com/lambdaisland/fetch
   B) [X] (this is an alternative to try) https://github.com/r0man/cljs-http?tab=readme-ov-file
      #+begin_src verb
      GET https://api.github.com/users?since=135
      User-agent: emacs
      #+end_src
      * [2024-08-27 Tue 09:25] I am having difficulties to connect async nature of core-async channels (same as promises?)
        to the actual useEffect or anything. Reading...
        * [[https://stackoverflow.com/questions/71174509/proper-async-await-syntax-for-fetching-data-using-useeffect-hook-in-react][async in useEffect]]
        * [[https://pitch-io.github.io/uix/docs/hooks.html][Uix on hooks]]
        * [[https://react.dev/learn/adding-interactivity][React event handlers]]
        * [[https://clojure.org/guides/async_walkthrough][core.async Walkthrough]]
        * [[https://stackoverflow.com/questions/56028913/usememo-vs-useeffect-usestate][useMemo vs. useEffect + useState]]
        * https://www.freecodecamp.org/news/how-to-work-with-usememo-in-react/

   C) some people suggest to use Axios directly from Clojurescript.
 - [X] Display nice formatted results
   - https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-type-properties/#api-rest-api-3-issuetype-issuetypeid-properties-get
 - [X] Do a call via function
 - [X] Connect results it via ~use-effect~ or somehow else? Read docs and do!
 - [X] Fine tune the display results
 - [X] Show estimates column
 - [X] Limit to a project via settings
 - [X] Add button to ticket details & estimation process
 - [X] Logout button
 - [X] Switch to voting screen
 - [X] Async python function with results caching on FastAPI / (memoize | Redis)

** DONE add jql: search support
   CLOSED: [2024-09-15 Sun 15:30]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2024-09-15 Sun 15:30]
   - State "TODO"       from              [2024-09-08 Sun 12:55]
   :END:
** WORKING Voting screen [6/11] [54%]
   :LOGBOOK:
   CLOCK: [2024-09-08 Sun 16:35]--[2024-09-08 Sun 18:01] =>  1:26
   CLOCK: [2024-09-08 Sun 15:00]--[2024-09-08 Sun 15:40] =>  0:40
   CLOCK: [2024-09-08 Sun 12:27]--[2024-09-08 Sun 13:00] =>  0:33
   CLOCK: [2024-09-08 Sun 10:30]--[2024-09-08 Sun 11:04] =>  0:34
   CLOCK: [2024-09-07 Sat 08:42]--[2024-09-07 Sat 13:00] =>  4:18
   CLOCK: [2024-09-06 Fri 07:31]--[2024-09-06 Fri 08:24] =>  0:53
   - State "WORKING"    from "TODO"       [2024-09-05 Thu 09:25]
   CLOCK: [2024-09-05 Thu 07:30]--[2024-09-05 Thu 09:27] =>  1:57
   - State "TODO"       from              [2024-08-28 Wed 23:25]
   :END:

 - [X] Menu is-active
 - [X] Prepare FastAPI endpoint
 - [X] Cache ticket data
 - [-] Display data on screen
   - [2024-09-06 Fri 09:25] data is displayed but ~markdown~ formatting is required...
   - [X] format markdown (on backend?)
   - [ ] format URLs via custom fn
   - [ ] (maybe) format images as external URLs via custom fn?
 - [X] Add 'vote' layout block
 - [X] Set voted ticket & bg color for button
 - [X] Send vote data to server
   - [X] add backend endpoint
     - [X] store data in dict. [[https://stackoverflow.com/questions/19201290/how-to-save-a-dictionary-to-a-file][use pickle?]]
   - [X] add fx handler event
   - +[ ] we also need to send POST on estimation start!+ we already have info
   - [X] send data only if value has changed!
 - +[ ] Countdown timer for voting (configure the length via .env)+ no need, can be replaced by 'finish'
 - [ ] Indication who has started voting.
 - [ ] Indication of people which finished voting - list.
 - [ ] Reveal results & set estimate via Jira API
 - [ ] Abort previous search request on new search

** TODO check logged in state (when in ~/app~) and other statuses (because currenly it allows to see ~/app/~ [1/2]
   :LOGBOOK:
   - State "TODO"       from "REVIEW"     [2024-09-15 Sun 08:45]
   - State "REVIEW"     from              [2024-09-15 Sun 08:45]
   :END:

 - [X] make 'sync' / 'status' query.
 - [ ] make sure ws is still working, reconnect if not.

** TODO Websocket coordination [2/7]
   :LOGBOOK:
   CLOCK: [2024-09-15 Sun 10:05]--[2024-09-15 Sun 15:08] =>  5:03
   CLOCK: [2024-09-14 Sat 07:46]--[2024-09-14 Sat 15:48] =>  8:02
   CLOCK: [2024-09-12 Thu 07:54]--[2024-09-12 Thu 09:27] =>  1:33
   CLOCK: [2024-09-11 Wed 07:00]--[2024-09-11 Wed 08:00] =>  1:00
   CLOCK: [2024-09-10 Tue 20:52]--[2024-09-11 Wed 07:56] => 11:04
   CLOCK: [2024-09-09 Mon 22:00]--[2024-09-09 Mon 22:46] =>  0:46
   CLOCK: [2024-09-09 Mon 07:35]--[2024-09-09 Mon 08:02] =>  0:27
   - State "TODO"       from              [2024-08-28 Wed 23:25]
   :END:
 
- [X] Add WS handler on backend, check it works with sample HTML code
- [X] pub/sub pattern on FastAPI backend:
  - https://pypi.org/project/fastapi-websocket-pubsub/
  - https://gist.github.com/appeltel/fd3ddeeed6c330c7208502462639d2c9
  - https://github.com/6ixOnline/fastapi-pubsub
  - tired from non-working examples. switching to a well known path with 
    aioredis https://aioredis.readthedocs.io/en/latest/#installation
  - https://gist.github.com/charsyam/1efc7f38860225c63b05379fffe73256
  - https://medium.com/@nandagopal05/scaling-websockets-with-pub-sub-using-python-redis-fastapi-b16392ffe291
  - [X] https://github.com/Thierry46/pubsub (Looks good, embedding it!) [2024-09-11 Wed 07:55]
  - https://github.com/fastapi/fastapi/issues/258
- [ ] Add WS support on cljs side
  - https://github.com/weavejester/haslett
  - https://github.com/RutledgePaulV/websocket-fx?tab=readme-ov-file
  - https://github.com/ftravers/reframe-websocket
  - https://heykieran.github.io/post/using-sse-and-websockets/
  - https://dev.to/bitecode/turn-sync-function-to-async-python-tips-58nn
- [2024-09-14 Sat 15:35] got tired by implementing websocket coordination but it finally works
- [ ] auto reconnect web socket?
- [ ] send current screen info after auto reconnect/connect!
- [ ] 'sync' button to reconnect websocket (red/green/auto reconnect)
- [ ] Synhronize current screen
  - add 'app-state' endpoint - we will check this after login/on app load because
    async user can do anything async
  - react to ws messages online - e.g. commands:
    - +[ ] Goto screen <name>+
    - [X] Vote for ticket <jira id>
    - [ ] Voting finished (works for manual finish too)
    - [ ] User logged in: (<username>)
    - [ ] Online members (16): A, B, C
- [ ] Display voting results when 'voting finished' received
- [ ] Listen & display online members
- [ ] Display vote results at bottom
- [ ] websocket for logging updates!
