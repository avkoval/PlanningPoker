#+AUTHOR: avkoval (ok)
#+TITLE: Planning Poker
#+SETUPFILE: https://raw.githubusercontent.com/fniessen/org-html-themes/master/org/theme-readtheorg.setup
#+OPTIONS: num:nil toc:t ^:nil

* What is this

I am playing with technology and trying new things. Because JIRA does not provide
such functionality out of the box, I would like to develop SPA to play it with my
team. I am aware about tons of /similar/ products existing in this area (all are paid!), 
never seen any of them, and actually the work I do here is mostly for _my personal skills 
development_.

* Project structure

#+begin_example
Directory tree
==============
[-] PlanningPoker
 |--[+] __pycache__
 |--[-] backend                    <--- backed code
 |   |--[+] __pycache__
 |   |----- __init__.py
 |   |----- config.py
 |   `----- main.py                <---------------- main.py
 |--[+] planningpoker
 |--[-] pp-front                   <-- UIx project, created with:
 |   |--[+] dev                        npx create-uix-app@latest pp-front --re-frame`
 |   |--[+] node_modules
 |   |--[+] public
 |   |--[-] src
 |   |   `--[-] app
 |   |       |----- core.cljs      <--- function of FrontEnd
 |   |       |----- core.css
 |   |       |----- db.cljs
 |   |       |----- fx.cljs
 |   |       |----- handlers.cljs
 |   |       |----- hooks.cljs
 |   |       `----- subs.cljs
 |   |----- LICENSE.md
 |   |----- README.md
 |   |----- deps.edn
 |   |----- package.json
 |   |----- shadow-cljs.edn
 |   `----- yarn.lock
 |--[+] static
 |--[-] templates
 |   `----- index.html
 |--[+] tests
 |----- README.org                 <----- mode Source of this README.html
 |----- __init__.py
 |----- bb.edn                     <----- for commands
 |----- poetry.lock
 `----- pyproject.toml

#+end_example
* Install

* Setup

  Copy & edit contents of .env file: setup variables

#+begin_example
cp .env-example .env
#+end_example
  
  To do this you will need to create Google Project and obtain Oauth authorization keys.

** Available settings

| Variable name         | Documentation                                                                                               |
|-----------------------+-------------------------------------------------------------------------------------------------------------|
| GOOGLE_CLIENT_ID      | Google Oauth credentials                                                                                    |
| GOOGLE_CLIENT_SECRET  |                                                                                                             |
| SECRET_KEY            | Secret key, must be specified                                                                               |
| ALLOWED_EMAIL_DOMAINS | Restrict domains list (for example list here only organization domains). If empty - all domains are allowed |

* Run

#+begin_example
poetry run fastapi dev backend/main.py
#+end_example

(if you have babashka installed):
#+begin_example
bb run fastapi
#+end_example

* WORKING Planning poker for Fieldhub
  SCHEDULED: <2024-08-17 Sat>
  :LOGBOOK:
  CLOCK: [2024-08-17 Sat 09:52]--[2024-08-17 Sat 10:04] =>  0:12
  CLOCK: [2024-08-17 Sat 08:14]--[2024-08-17 Sat 09:00] =>  0:46
  - State "WORKING"    from "IDEA"       [2024-08-17 Sat 08:05]
  - State "IDEA"       from "TODO"       [2024-08-17 Sat 08:05]
  - State "TODO"       from              [2024-08-17 Sat 07:55]
  :END:


** Technical design & architecture
*** DONE View practically, Kit, Uix & bootstrap the project
    CLOSED: [2024-08-17 Sat 20:05]
    :LOGBOOK:
    - State "DONE"       from "WORKING"    [2024-08-17 Sat 20:05]
    CLOCK: [2024-08-17 Sat 13:25]--[2024-08-17 Sat 17:07] =>  3:42
    CLOCK: [2024-08-17 Sat 11:20]--[2024-08-17 Sat 11:38] =>  0:18
    - State "WORKING"    from "DONE"       [2024-08-17 Sat 11:20]
    - State "DONE"       from "TODO"       [2024-08-17 Sat 11:15]
    - State "TODO"       from              [2024-08-17 Sat 07:55]
    :END:

 - [X] Decided to use FastCGI instead of Kit in this round ([2024-08-17 Sat 11:20]). Reasons:
   - I already know how to use Jira integtration with Python
   - I want to gain some FastAPI experience
 - [X] How to add ReFrame? 11:29.44 (00:08) Found, explained in: https://github.com/pitch-io/uix-starter
   #+begin_example
   npx create-uix-app@latest my-app --re-frame # adds re-frame setup
   #+end_example
 - [X] View (again) [[https://www.youtube.com/watch?v=4vgrLHsD0-I&t=3s][intro video from Roman Liutikov]]
 - [X] Re-try modern React tutorial
 - [X] Start learning Udemy React course, take some first lessons

*** DONE use FastAPI! use Google auth & ready Jira integration I have!
    CLOSED: [2024-08-25 Sun 15:05]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2024-08-25 Sun 15:05]
    CLOCK: [2024-08-18 Sun 20:26]--[2024-08-18 Sun 20:46] =>  0:20
    CLOCK: [2024-08-18 Sun 08:37]--[2024-08-18 Sun 20:26] => 11:49
    - State "TODO"       from              [2024-08-17 Sat 08:10]
    :END:

 - https://google-auth.readthedocs.io/en/master/
 - https://github.com/hanchon-live/tutorial-fastapi-oauth
 - https://blog.hanchon.live/guides/google-login-with-fastapi/ (following)
 - https://docs.authlib.org/en/latest/client/starlette.html (works)

*** TODO Use websocket for fast communication!
    :LOGBOOK:
    - State "TODO"       from              [2024-08-17 Sat 08:10]
    :END:

 - FastAPI provides support: 
** TODO UI functional implementation [0/6]
   :LOGBOOK:
   - State "TODO"       from              [2024-08-17 Sat 08:10]
   :END:

 * SPA - one screen on UIx
 * [ ] List logged in users
 * [ ] Set color for facilitator?
   * how to agree who is facilitator? may be anyone can? probably yes, but then warn on top who started it
 * [ ] Countdown timer (configuration for length) starts
 * [ ] List of SPs (configuration)
 * [ ] Strike for users who voted
 * [ ] Reveal cards with some visual effect

** DONE Bootstrap: FastAPI + UIx^2 in one folder & dev/prod start/deploy/+sentry/+logging
   CLOSED: [2024-08-25 Sun 07:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2024-08-25 Sun 07:05]
   CLOCK: [2024-08-17 Sat 10:04]--[2024-08-17 Sat 10:24] =>  0:20
   - State "TODO"       from              [2024-08-17 Sat 08:20]
   :END:

- [X] Install fastapi via poetry
- [X] Bootstrap UIX^2 project
- [X] Add/commit to git
- [ ] Publish on github
** DONE Google auth & JWT token (or session cookie)
   CLOSED: [2024-08-25 Sun 07:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2024-08-25 Sun 07:05]
   - State "TODO"       from              [2024-08-17 Sat 08:25]
   :END:
** WORKING add running via bb.edn
   :LOGBOOK:
   - State "WORKING"    from "TODO"       [2024-08-25 Sun 15:05]
   - State "TODO"       from              [2024-08-25 Sun 12:10]
   :END:
 - Finish watching [[https://www.youtube.com/watch?v=u5ECoR7KT1Y][Babashka tasks (by Michiel Borkent)]] from /The London Clojurians are happy to present 3 years ago/

** WORKING Search for ticket (Estimate ticket screen) [0/7]
   :LOGBOOK:
   - State "WORKING"    from "TODO"       [2024-08-25 Sun 15:05]
   CLOCK: [2024-08-25 Sun 12:00]--[2024-08-25 Sun 13:29] =>  1:29
   - State "TODO"       from              [2024-08-25 Sun 07:05]
   :END:

 - [ ] Select library to make HTTP calls.
   - Trying https://github.com/lambdaisland/fetch
   - (this is an alternative to try) https://github.com/r0man/cljs-http?tab=readme-ov-file
     #+begin_src verb
     GET https://api.github.com/users?since=135
     User-agent: emacs
     #+end_src

   - some people suggest to use Axios directly from Clojurescript.
 - [ ] Make a stub function on FastAPI side for now.
 - [ ] Do a call via function
 - [ ] Connect results it via ~use-effect~ or somehow else? Read docs and do!
 - [ ] Write async python function with results caching on FastAPI
 - [ ] Fine tune the display results
 - [ ] Enter - key event or Mouse on-click on the item - change the screen to the voting

** TODO List tickets from Jira by search criteria
   :LOGBOOK:
   - State "TODO"       from              [2024-08-17 Sat 08:25]
   :END:
